[{"name": "app.py", "content": "from shiny import App, reactive, render, ui\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm, ttest_ind\n\n# Z-test function\ndef calculate_ztest(control, test):\n    \"\"\"\n    Perform a Z-test for two samples.\n    Returns the effect size, Z-statistic, and p-value.\n    \"\"\"\n    mean_control = np.mean(control)\n    mean_test = np.mean(test)\n\n    var_mean_control = np.var(control, ddof=1) / len(control)\n    var_mean_test = np.var(test, ddof=1) / len(test)\n\n    difference_mean = mean_test - mean_control\n    difference_mean_var = var_mean_control + var_mean_test\n\n    zstat = difference_mean / np.sqrt(difference_mean_var)\n    pvalue = norm.sf(np.abs(zstat)) * 2  # two-sided\n    effect = difference_mean\n\n    return effect, zstat, pvalue\n\ndef compute_ecdf(data):\n    ta = np.linspace(0, 1, 1000) # theoretical alphas\n    y = [np.mean(data) < x for x in ta]\n    return ta, y\n\n# Define the UI\napp_ui = ui.page_fluid(\n    ui.h1(\"Welch test with unequal variances VS asymptotic Z test with equal variances\"),\n    ui.layout_sidebar(\n        ui.sidebar(\n            ui.input_slider(\"num_sim\", \"Number of Simulations:\", min=100, max=20000, value=1000, step=100),\n            ui.input_slider(\"sample_size\", \"Sample size\", min=20, max=100000, value=5000, step=50),\n            ui.input_numeric(\"variance_mult\", \"Variance Multiplier:\", value=1.0, min=0.1, max=10, step=0.1),\n            ui.input_numeric(\"lift\", \"Lift, % for AB test\", value=0.1, min=0, max=1, step=0.1),\n            ui.input_action_button(\"run_sim\", \"Run Simulation\", class_=\"btn-primary\"),\n        ),\n        # Output section for the results\n        ui.output_plot(\"main\", width=800, height=800),\n    )\n)\n\ndef server(input, output, session):\n\n    @reactive.calc()\n    def run_simulation():\n        nsim = input.num_sim()\n        variance_multiplier = input.variance_mult()\n        lift = input.lift()\n        base_var = 1\n\n        pv = []\n\n        for i in range(nsim):\n            cnt = norm.rvs(loc=1, scale=base_var, size=input.sample_size())\n            trt = norm.rvs(loc=1 * (1 + lift), scale=base_var * variance_multiplier, size=input.sample_size())\n\n            zt_result = calculate_ztest(cnt, trt)\n            ttest_result = ttest_ind(cnt, trt, equal_var=False)\n\n            pv.append([variance_multiplier, zt_result[2], ttest_result.pvalue])\n\n        # Store results in the reactive values\n        df = pd.DataFrame(pv, columns=[\"var_mult\", \"pvalue_zt\", \"pvalue_tt\"])\n\n        return df\n\n    @render.plot\n    @reactive.event(input.run_sim, ignore_none=True)\n    def main():\n\n        df = run_simulation()\n        # Create a figure and axis object\n        fig, ax = plt.subplots(figsize=(8, 8))\n\n        # Compute ECDF\n        xt, yt = compute_ecdf(df[\"pvalue_tt\"])\n        xz, yz = compute_ecdf(df[\"pvalue_zt\"])\n        \n        # Plot ECDF\n        ax.step(xt, yt, where=\"post\", color=\"blue\", label='TTest')\n        ax.step(xz, yz, where=\"post\", color=\"red\", label='ZTest', alpha=0.6)\n        ax.set_title(f'Var in B is {input.variance_mult()} times higher than in A', fontsize=10)\n        ax.grid(True)\n\n        ax.legend()\n        return fig\n\n# Run the app\napp = App(app_ui, server)\n", "type": "text"}]